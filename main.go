// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package main

import (
	"errors"
	"fmt"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/secretsmanager"
	"github.com/high-performance-payment-gateway/balance-service/balance/pkg/pkg_internal/error_base"
	"github.com/high-performance-payment-gateway/balance-service/balance/pkg/pkg_internal/error_internal/error_http"
	"strings"
	"time"
)

var _ time.Duration
var _ strings.Reader
var _ aws.Config

func parseTime(layout, value string) *time.Time {
	t, err := time.Parse(layout, value)
	if err != nil {
		panic(err)
	}
	return &t
}

func main() {

	err := testError()
	if err != nil {
		if error_base.IsErrorBase(err) {
			errB := error_base.GetErrorBase(err)
			if error_http.IsErrorHttpInternal(errB) {
				fmt.Println("is instance of error internal")
			}
			//todo handle Error Code Custom
			//switch errB.Code() {
			//case :
			//}
			fmt.Println(errB.GetCode())
		} else {
			// todo handle defaut error golang
			fmt.Println(err.Error())
		}
	} else {
		fmt.Println("error = nil")
	}
}

// To retrieve the encrypted secret value of a secret
// The following example shows how to retrieve a secret string value.
func ExampleSecretsManager_GetSecretValue_shared00() {
	svc := secretsmanager.New(session.New())
	input := &secretsmanager.GetSecretValueInput{
		SecretId: aws.String("MyTestDatabaseSecret"),
	}

	result, err := svc.GetSecretValue(input)
	if err != nil {
		if aerr, ok := err.(awserr.Error); ok {
			switch aerr.Code() {
			case secretsmanager.ErrCodeResourceNotFoundException:
				fmt.Println(secretsmanager.ErrCodeResourceNotFoundException, aerr.Error())
			case secretsmanager.ErrCodeInvalidParameterException:
				fmt.Println(secretsmanager.ErrCodeInvalidParameterException, aerr.Error())
			case secretsmanager.ErrCodeInvalidRequestException:
				fmt.Println(secretsmanager.ErrCodeInvalidRequestException, aerr.Error())
			case secretsmanager.ErrCodeDecryptionFailure:
				fmt.Println(secretsmanager.ErrCodeDecryptionFailure, aerr.Error())
			case secretsmanager.ErrCodeInternalServiceError:
				fmt.Println(secretsmanager.ErrCodeInternalServiceError, aerr.Error())
			default:
				fmt.Println(aerr.Error())
			}
		} else {
			// Print the error, cast err to awserr.Error to get the Code and
			// Message from an error.
			fmt.Println(err.Error())
		}
		return
	}

	fmt.Println(result)
}

func testError() error {
	return error_http.NewErrorInternal()
	return errors.New("Test")
	return error_base.New(3, "Test")
}

//func getDatabaseAuth() {
//	secretID := os.Getenv("AWS_SECRET_ID")
//	region := os.Getenv("AWS_REGION")
//
//	svc := secretsmanager.New(session.New(&aws.Config {
//		Region: &region,
//	}))
//
//	input := &secretsmanager.GetSecretValueInput{
//		SecretId:     aws.String(secretID),
//		VersionStage: aws.String("AWSCURRENT"),
//	}
//
//	result, err := svc.GetSecretValue(input)
//	var databaseAuth = Models.DatabaseAuth{}
//
//	if err == nil {
//		var secretString, decodedBinarySecret string
//
//		if result.SecretString != nil {
//			secretString = *result.SecretString
//			json.Unmarshal([]byte(secretString) , &databaseAuth)
//		} else {
//			decodedBinarySecretBytes := make([]byte, base64.StdEncoding.DecodedLen(len(result.SecretBinary)))
//			len, err := base64.StdEncoding.Decode(decodedBinarySecretBytes, result.SecretBinary)
//			if err != nil {
//				fmt.Println("Base64 Decode Error:", err)
//			}
//			decodedBinarySecret = string(decodedBinarySecretBytes[:len])
//			json.Unmarshal([]byte(decodedBinarySecret) , &databaseAuth)
//		}
//	}
//	//return databaseAuth
//}
